name: Deploy CCFS Blog

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    # Deploy Infrastructure
    - name: Terraform Init
      working-directory: ./
      run: terraform init

    - name: Terraform Apply
      working-directory: ./
      run: terraform apply -auto-approve

    # Deploy Lambda
    - name: Install Lambda dependencies
      run: |
        cd lambda-functions/get-blog-posts
        npm install
        zip -r ../lambda.zip .
        aws lambda update-function-code --function-name blog_function --zip-file fileb://../lambda.zip

    # Deploy React App
    - name: Build React App
      run: |
        cd my-blog
        echo "REACT_APP_API_URL=$(terraform output -raw api_url)" > .env
        echo "REACT_APP_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)" >> .env
        echo "REACT_APP_USER_POOL_CLIENT_ID=$(terraform output -raw cognito_client_id)" >> .env
        npm install
        npm run build

    - name: Deploy to S3
      run: |
        aws s3 sync my-blog/build/ s3://my-serverless-blog --delete

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id $(terraform output -raw cloudfront_distribution_id) --paths "/*"